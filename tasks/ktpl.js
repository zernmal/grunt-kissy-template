/*
 * grunt-kissy-template
 * https://github.com/qipbbn/kissy-template
 *
 * Copyright (c) 2013 maxbbn
 * Licensed under the MIT license.
 */

'use strict';

var minify = require('html-minifier').minify;

module.exports = function (grunt) {

  // Please see the Grunt documentation for more information regarding task
  // creation: http://gruntjs.com/creating-tasks
  var kissyModuleTemplate = function(tpl){

      tpl.replace();

      return "/**\n" +
        " * Generated By grunt-kissy-template\n" +
        " */\n" +
        "KISSY.add(function(){\n" +
        "    return '"+ tpl +"';\n" +
        "});";
  }
  

  grunt.registerMultiTask('ktpl', 'Your task description goes here.', function () {
    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
      minify: false,
      minifyOption: {
        removeComments: true,
        removeCommentsFromCDATA: true,
        removeCDATASectionsFromCDATA: true,
        collapseWhitespace: true,
        collapseBooleanAttributes: true,
        removeAttributeQuotes: true,
        removeEmptyAttributes: true
      }
    });

    grunt.template.addDelimiters('myDelimiters', '{%{', '}%}');
    grunt.template.setDelimiters('myDelimiters');

    function kissy_template(src, dest) {
      src = src.replace(/\r\n/g, '\n').replace(/\'/g, "\\'");

      var moduleJS = kissyModuleTemplate(src);

      // Write the destination file.
      grunt.file.write(dest, moduleJS);

      // Print a success message.
      grunt.log.writeln('File "' + dest + '" created.');
    }

    // Iterate over all specified file groups.
    this.files.forEach(function (file) {
      // Concat specified files.
      if (file.dest) {
        //if has dest, concat all src files
        var src = file.src.filter(function (filepath) {
          // Warn on and remove invalid source files (if nonull was set).
          if (!grunt.file.exists(filepath)) {
            grunt.log.warn('Source file "' + filepath + '" not found.');
            return false;
          } else {
            return true;
          }
        }).map(function (filepath) {
            // Read file source.
            var content =  grunt.file.read(filepath);


            if (options.minify) {
              try {
                content = minify(content, options.minifyOption);
              } catch (e) {
                grunt.warn("Minify Error: " + filepath);
              }
            }

            return content;

          }).join(' ');

        kissy_template(src, file.dest);

      } else {
        //else each src html file to js file
        file.src.filter(function (filepath) {
          // Warn on and remove invalid source files (if nonull was set).
          if (!grunt.file.exists(filepath)) {
            grunt.log.warn('Source file "' + filepath + '" not found.');
            return false;
          } else {
            return true;
          }
        }).forEach(function(filepath){
            var content = grunt.file.read(filepath);
            if (options.minify) {
              try {
                content = minify(content, options.minifyOption);
              } catch (e) {
                grunt.warn("Minify Error: " + filepath);
              }
            }


            // extname to js
            var dest = filepath.replace(/\.([^.]*)$/, '.js');

            kissy_template(content, dest);

          });
      }
    });
  });

};
